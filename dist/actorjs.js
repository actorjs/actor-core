(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.actorjs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = {
    ActorRef: require("./src/ActorRef"),
    ActorContext: require("./src/ActorContext"),
    ActorSystem: require("./src/ActorSystem"),
    ActorUtil: require("./src/ActorUtil"),
    ActorMessages: require("./src/ActorMessages.js"),
    ActorMatchers: require("./src/ActorMatchers.js")
}

},{"./src/ActorContext":2,"./src/ActorMatchers.js":3,"./src/ActorMessages.js":4,"./src/ActorRef":5,"./src/ActorSystem":6,"./src/ActorUtil":7}],2:[function(require,module,exports){
var ActorSystem = require("./ActorSystem");


var ActorContext = function (actor, reference, system, parent) {
    actor.context = this;
    actor.self = reference;
    reference.context = this;
    this.system = system;
    this.self = reference;
    this.parent = parent;
    this.children = { };

}

ActorContext.prototype.actorOf = function(clss, name, options) {
    var ActorUtil = require("./ActorUtil");
    var child = ActorUtil.newActor(clss, this.system, this.self, name, options);
    this.children[name] = child;
    return child;
}

ActorContext.prototype.actorFor = function(name) {
    if (name[0] === '/')
        return this.system.actorFor(name);

    if (name === '..')
        return this.parent;

    if (name.substring(0, 3) === '../')
        return this.parent.context.actorFor(name.substring(3));

    if (name.indexOf(':') > 0)
        return this.system.actorFor(name);

    var position = name.indexOf('/');

    if (position > 0) {
        var rest = name.substring(position + 1);
        name = name.substring(0, position);
        return this.children[name].context.actorFor(rest);
    }
    else
        return this.children[name];
}

module.exports = ActorContext;
},{"./ActorSystem":6,"./ActorUtil":7}],3:[function(require,module,exports){
var TypeMatcher = function(receive){

    return function(message){
        if(!receive[message.type]) throw new Error("Connot typeMatch: " + message.type);
        receive[message.type](message.data)
    }

};

module.exports = {
    TypeMatcher: TypeMatcher
};

},{}],4:[function(require,module,exports){
var TypeMessage = function (type, data) {
    return {
        type: type,
        data: data
    }
}


module.exports = {
    TypeMessage: TypeMessage
};

},{}],5:[function(require,module,exports){
function ActorRef(actor, parentpath, name) {
    this.actor = actor;
    this.path = parentpath + "/" + name;
    console.log("Path: ", this.path)
}

ActorRef.prototype.tell = function (msg) {
    this.actor.receive(msg);
}

module.exports = ActorRef;
},{}],6:[function(require,module,exports){
var ActorUtil = require("./ActorUtil");

function ActorSystem(name) {
    var counter = 0;
    this.name = name;
    this.path = "actor://" + name;
    this.children = { };

    this.nextName = function () {
        counter++;
        return '_' + counter;
    }
}

ActorSystem.prototype.actorOf = function(clss, name, options) {
    var actor = ActorUtil.newActor(clss, this, null, name, options);
    this.children[name] = actor;
    return actor;
}

ActorSystem.prototype.actorFor = function (name) {
    if (name.indexOf(':') > 0) {
        var path = ActorUtil.parsePath(name);

        if (path.server) {
            var servername = path.server + ':' + path.port;
            if (servername !== this.node.name)
                return this.node.getNode(servername).getSystem(path.system).actorFor(path.path);
        }

        name = path.path;
    }

    if (name && name[0] === '/')
        name = name.substring(1);

    var position = name.indexOf('/');

    if (position > 0) {
        var rest = name.substring(position + 1);
        name = name.substring(0, position);
        return this.children[name].context.actorFor(rest);
    }
    else
        return this.children[name];
}

module.exports = ActorSystem;

},{"./ActorUtil":7}],7:[function(require,module,exports){
var ActorUtil = {

    newActor: function (clss, system, parent, name) {
        var actor;

        if (typeof clss === 'function')
            actor = new clss();
        else
            actor = clss;

        if (!name)
            name = system.nextName();

        var ActorRef = require("./ActorRef");
        var ref = new ActorRef(actor, parent ? parent.path : system.path, name);

        var ActorContext = require("./ActorContext");
        var context = new ActorContext(actor, ref, system, parent);


        actor.context = context;

        actor.persist = function(msg){
            console.log("PERSIST")
            actor.update(msg)
        }

        return ref;
    },

    parsePath: function (path) {
        var result = {};
        var position = path.indexOf(':');

        result.protocol = path.substring(0, position);

        var rest = path.substring(position + 3);

        var positionat = rest.indexOf('@');
        position = rest.indexOf('/');

        if (positionat >= 0 && positionat < position) {
            result.system = rest.substring(0, positionat);
            result.server = rest.substring(positionat + 1, position);

            var poscolon = result.server.indexOf(':');

            if (poscolon > 0) {
                result.port = parseInt(result.server.substring(poscolon + 1));
                result.server = result.server.substring(0, poscolon);
            }
        }
        else
            result.system = rest.substring(0, position);

        result.path = rest.substring(position);

        return result;
    }
}

module.exports = ActorUtil;

},{"./ActorContext":2,"./ActorRef":5}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
